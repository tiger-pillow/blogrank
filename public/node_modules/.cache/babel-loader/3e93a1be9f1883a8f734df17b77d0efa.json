{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/gladys/Desktop/blogrank/client/src/components/gridSystem.js\";\n\nimport React, { useEffect, useState } from 'react';\nimport { Container, Row, Col } from 'react-bootstrap';\n\nvar GridSystem = function GridSystem(colCount, children) {\n  var rowCount = Math.floor(children.length / colCount) + 1;\n  console.log(\"row count is :\", rowCount);\n  console.log(\"children is \", children);\n  var index = 0; // keeps track of the current child we are on \n\n  var buildGrid = function buildGrid() {\n    return renderRows();\n  };\n\n  var renderRows = function renderRows() {\n    var rows = [];\n\n    for (var row = 0; row < rowCount; row++) {\n      rows.push( /*#__PURE__*/React.createElement(Row, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 10\n        }\n      }, renderCols()));\n    }\n\n    return rows;\n  };\n\n  var renderCols = function renderCols() {\n    var cols = [];\n\n    for (var col = 0; col < colCount; col++) {\n      if (index < children.length) {\n        cols.push( /*#__PURE__*/React.createElement(Col, {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 11\n          }\n        }, children[index]));\n      }\n\n      index++;\n    }\n\n    return cols;\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Container, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }, buildGrid()));\n};\n\nexport default GridSystem;","map":{"version":3,"sources":["/Users/gladys/Desktop/blogrank/client/src/components/gridSystem.js"],"names":["React","useEffect","useState","Container","Row","Col","GridSystem","colCount","children","rowCount","Math","floor","length","console","log","index","buildGrid","renderRows","rows","row","push","renderCols","cols","col"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAAQC,SAAR,EAAmBC,GAAnB,EAAwBC,GAAxB,QAAmC,iBAAnC;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,QAAD,EAAWC,QAAX,EAAuB;AACxC,MAAIC,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWH,QAAQ,CAACI,MAAT,GAAiBL,QAA5B,IAAwC,CAAvD;AACAM,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BL,QAA9B;AACAI,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BN,QAA5B;AACA,MAAIO,KAAK,GAAG,CAAZ,CAJwC,CAI1B;;AAEd,MAAMC,SAAS,GAAG,SAAZA,SAAY,GAAM;AACrB,WACEC,UAAU,EADZ;AAGF,GAJD;;AAMA,MAAMA,UAAU,GAAG,SAAbA,UAAa,GAAM;AACvB,QAAIC,IAAI,GAAG,EAAX;;AACA,SAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGV,QAAxB,EAAkCU,GAAG,EAArC,EAAwC;AACrCD,MAAAA,IAAI,CAACE,IAAL,eACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACIC,UAAU,EADd,CADF;AAKF;;AACD,WAAOH,IAAP;AACD,GAVD;;AAYA,MAAMG,UAAU,GAAG,SAAbA,UAAa,GAAK;AACtB,QAAIC,IAAI,GAAG,EAAX;;AACA,SAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGhB,QAAxB,EAAkCgB,GAAG,EAArC,EAAwC;AACtC,UAAIR,KAAK,GAAGP,QAAQ,CAACI,MAArB,EAA4B;AAC1BU,QAAAA,IAAI,CAACF,IAAL,eACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACGZ,QAAQ,CAACO,KAAD,CADX,CADF;AAID;;AACDA,MAAAA,KAAK;AACN;;AACD,WAAOO,IAAP;AACD,GAZD;;AAcA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACIN,SAAS,EADb,CADF,CADF;AAOD,CA7CD;;AA+CA,eAAeV,UAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport {Container, Row, Col } from 'react-bootstrap';\n\nconst GridSystem = (colCount, children) =>{\n  let rowCount = Math.floor(children.length/ colCount) + 1\n  console.log(\"row count is :\", rowCount);\n  console.log(\"children is \", children);\n  let index = 0 // keeps track of the current child we are on \n\n  const buildGrid = () => {\n     return (\n       renderRows()\n     )\n  }\n\n  const renderRows = () => {\n    let rows = []\n    for (let row = 0; row < rowCount; row++){\n       rows.push(\n         <Row>\n           { renderCols() }\n         </Row>\n       )\n    }\n    return rows; \n  }\n\n  const renderCols = () =>{\n    let cols = []; \n    for (let col = 0; col < colCount; col++){\n      if (index < children.length){\n        cols.push(\n          <Col>\n            {children[index]}\n          </Col> )\n      }\n      index ++; \n    }\n    return cols;\n  }\n\n  return (\n    <div>\n      <Container>\n         {buildGrid()}\n      </Container>\n    </div>\n  )\n}\n\nexport default GridSystem; "]},"metadata":{},"sourceType":"module"}